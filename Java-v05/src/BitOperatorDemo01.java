/**
 * 位运算符
 * 可以用于整数类型以及char类型的值运算
 */
public class BitOperatorDemo01 {
    public static void main(String[] args) {
        // 在Java中正数的补码也就是它的负数表示
        // 对正数的2进制按位取反后再加1就是它对应的负数
        // 对负数的2进制按位取反后再加1就是它对应的正数

        // 数字10的原码是00000000000000000000000000001010
        // 其反码是11111111111111111111111111110101
        // 10的反码加1是11111111111111111111111111110110，即数字10的补码，表示-10
        // 数字-10的反码是00000000000000000000000000001001
        // -10的反码加1是00000000000000000000000000001010，即数字-10的补码，表示10
        int a = 10;// 2进制表示为： 00000000000000000000000000001010
        int b = -10;// 2进制表示为：11111111111111111111111111110110
        System.out.println("0000000000000000000000000000" + Integer.toBinaryString(a));
        System.out.println(Integer.toBinaryString(b));

        // 按位取反
        System.out.println(~a);// ~10=-11 ~00000000000000000000000000001010=11111111111111111111111111110101
        System.out.println(~b);// ~-10=9  ~11111111111111111111111111110110=00000000000000000000000000001001

        int x = 42;// 原码00101010
        int y = 15;// 原码00001111

        // 按位与
        //       00101010
        //   &   00001111
        // --------------
        //       00001010   =>  10
        System.out.println(x & y);

        // 按位或
        //       00101010
        //   |   00001111
        // --------------
        //       00101111   =>  47
        System.out.println(x | y);

        // 按位异或
        // 按位或
        //       00101010
        //   ^   00001111
        // --------------
        //       00100101   =>  37
        System.out.println(x^y);
    }
}
